"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storage = void 0;
const path = __importStar(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const glob_1 = require("glob");
class Storage {
    constructor(rootDir) {
        this._rootDir = rootDir ? path.resolve(rootDir) : process.cwd();
    }
    async list(pattern) {
        const _pattern = pattern || '*';
        const files = await (0, glob_1.glob)(_pattern, {
            cwd: this._rootDir
        });
        return files.sort();
    }
    async createDir(dir) {
        const absFilepath = path.isAbsolute(dir) ? path.resolve(dir) : path.join(this._rootDir, dir);
        if (await fs_extra_1.default.exists(absFilepath))
            return;
        await fs_extra_1.default.mkdir(absFilepath, { recursive: true }).catch(console.error);
    }
    createDirSync(dir) {
        const absFilepath = path.isAbsolute(dir) ? path.resolve(dir) : path.join(this._rootDir, dir);
        if (fs_extra_1.default.existsSync(absFilepath))
            return;
        fs_extra_1.default.mkdirSync(absFilepath, { recursive: true });
    }
    async load(filepath) {
        return this._read(filepath);
    }
    async _read(filepath) {
        const absFilepath = path.isAbsolute(filepath)
            ? path.resolve(filepath)
            : path.join(this._rootDir, filepath);
        return await fs_extra_1.default.readFile(absFilepath, { encoding: 'utf8' });
    }
    async json(filepath) {
        const content = await this._read(filepath);
        return JSON.parse(content);
    }
    async exists(filepath) {
        const absFilepath = path.isAbsolute(filepath)
            ? path.resolve(filepath)
            : path.join(this._rootDir, filepath);
        return await fs_extra_1.default.exists(absFilepath);
    }
    existsSync(filepath) {
        const absFilepath = path.isAbsolute(filepath)
            ? path.resolve(filepath)
            : path.join(this._rootDir, filepath);
        return fs_extra_1.default.existsSync(absFilepath);
    }
    async _write(filepath, data = '') {
        const absFilepath = path.isAbsolute(filepath)
            ? path.resolve(filepath)
            : path.join(this._rootDir, filepath);
        const dir = path.dirname(filepath);
        await this.createDir(dir);
        await fs_extra_1.default.writeFile(absFilepath, data, { encoding: 'utf8', flag: 'w' });
    }
    _writeSync(filepath, data = '') {
        const absFilepath = path.isAbsolute(filepath)
            ? path.resolve(filepath)
            : path.join(this._rootDir, filepath);
        const dir = path.dirname(filepath);
        this.createDirSync(dir);
        fs_extra_1.default.writeFileSync(absFilepath, data, { encoding: 'utf8', flag: 'w' });
    }
    async append(filepath, data = '') {
        const absFilepath = path.isAbsolute(filepath)
            ? path.resolve(filepath)
            : path.join(this._rootDir, filepath);
        await fs_extra_1.default.appendFile(absFilepath, data, { encoding: 'utf8' });
    }
    async clear(filepath) {
        await this._write(filepath);
    }
    async save(filepath, content) {
        await this._write(filepath, content);
    }
    async saveSync(filepath, content) {
        this._writeSync(filepath, content);
    }
    async saveFile(file) {
        const absFilepath = path.isAbsolute(file.path())
            ? path.resolve(file.path())
            : path.join(this._rootDir, file.path());
        await this.createDir(file.dirname());
        await fs_extra_1.default.writeFile(absFilepath, file.content(), { encoding: 'utf8', flag: 'w' });
    }
    async createStream(filepath) {
        const absFilepath = path.isAbsolute(filepath)
            ? path.resolve(filepath)
            : path.join(this._rootDir, filepath);
        const dir = path.dirname(filepath);
        await this.createDir(dir);
        return fs_extra_1.default.createWriteStream(absFilepath);
    }
}
exports.Storage = Storage;
