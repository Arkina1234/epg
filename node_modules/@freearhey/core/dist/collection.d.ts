import { Dictionary } from './';
type Iteratee = (value: any, value2?: any) => void;
export declare class Collection {
    _items: any[];
    constructor(items?: any);
    first(predicate?: Iteratee): any;
    last(predicate?: Iteratee): any;
    find(iteratee: Iteratee): any;
    add(data: string | number | object): this;
    intersects(collection: Collection): boolean;
    count(): number;
    join(separator: string): string;
    indexOf(value: string | number | object): number;
    push(data: any): void;
    uniq(): Collection;
    filter(iteratee: Iteratee): Collection;
    forEach(callback: (item: any, index?: number) => void): this;
    remove(iteratee: Iteratee): Collection;
    concat(collection: Collection): Collection;
    reduce(iteratee: Iteratee): Collection;
    isEmpty(): boolean;
    notEmpty(): boolean;
    sort(): Collection;
    sortBy(iteratees: Iteratee | Iteratee[]): Collection;
    orderBy(iteratees: Iteratee | Iteratee[], orders?: 'asc' | 'desc' | string[], natural?: boolean): Collection;
    keyBy(iteratee: Iteratee): Dictionary;
    includes(value: any): boolean;
    missing(value: any): boolean;
    uniqBy(iteratee: Iteratee): Collection;
    groupBy(iteratee: Iteratee): Dictionary;
    map(iteratee: Iteratee): Collection;
    all(): any[];
    toJSON(): string;
    mergeBy(collection: Collection, iteratee: Iteratee): Collection;
}
export {};
