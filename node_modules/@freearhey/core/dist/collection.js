"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
const lodash_1 = __importDefault(require("lodash"));
const natural_orderby_1 = require("natural-orderby");
const _1 = require("./");
class Collection {
    constructor(items) {
        this._items = [];
        this._items = Array.isArray(items) ? items : [];
    }
    first(predicate) {
        if (predicate) {
            return this._items.find(predicate);
        }
        return this._items[0];
    }
    last(predicate) {
        if (predicate) {
            return lodash_1.default.findLast(this._items, predicate);
        }
        return this._items[this._items.length - 1];
    }
    find(iteratee) {
        return this._items.find(iteratee);
    }
    add(data) {
        this._items.push(data);
        return this;
    }
    intersects(collection) {
        return lodash_1.default.intersection(this._items, collection.all()).length > 0;
    }
    count() {
        return this._items.length;
    }
    join(separator) {
        return this._items.join(separator);
    }
    indexOf(value) {
        return this._items.indexOf(value);
    }
    push(data) {
        this.add(data);
    }
    uniq() {
        const items = lodash_1.default.uniq(this._items);
        return new Collection(items);
    }
    filter(iteratee) {
        const items = lodash_1.default.filter(this._items, iteratee);
        return new Collection(items);
    }
    forEach(callback) {
        this._items.forEach(callback);
        return this;
    }
    remove(iteratee) {
        const removed = lodash_1.default.remove(this._items, iteratee);
        return new Collection(removed);
    }
    concat(collection) {
        const items = this._items.concat(collection._items);
        return new Collection(items);
    }
    reduce(iteratee) {
        const items = this._items.reduce(iteratee, []);
        return new Collection(items);
    }
    isEmpty() {
        return this._items.length === 0;
    }
    notEmpty() {
        return this._items.length > 0;
    }
    sort() {
        const items = this._items.sort();
        return new Collection(items);
    }
    sortBy(iteratees) {
        const items = lodash_1.default.sortBy(this._items, iteratees);
        return new Collection(items);
    }
    orderBy(iteratees, orders = 'asc', natural = true) {
        const items = natural
            ? (0, natural_orderby_1.orderBy)(this._items, iteratees, orders)
            : lodash_1.default.orderBy(this._items, iteratees, orders);
        return new Collection(items);
    }
    keyBy(iteratee) {
        const items = lodash_1.default.keyBy(this._items, iteratee);
        return new _1.Dictionary(items);
    }
    includes(value) {
        if (typeof value === 'function') {
            const found = this._items.find(value);
            return !!found;
        }
        else if (typeof value === 'string') {
            return this._items.includes(value);
        }
        return false;
    }
    missing(value) {
        if (typeof value === 'function') {
            const found = this._items.find(value);
            return !found;
        }
        else if (typeof value === 'string') {
            return !this._items.includes(value);
        }
        return true;
    }
    uniqBy(iteratee) {
        const items = lodash_1.default.uniqBy(this._items, iteratee);
        return new Collection(items);
    }
    groupBy(iteratee) {
        const object = lodash_1.default.groupBy(this._items, iteratee);
        return new _1.Dictionary(object);
    }
    map(iteratee) {
        const items = this._items.map(iteratee);
        return new Collection(items);
    }
    all() {
        return this._items;
    }
    toJSON() {
        return JSON.stringify(this._items);
    }
    mergeBy(collection, iteratee) {
        this._items = lodash_1.default.unionBy(this._items, collection._items, iteratee);
        return this;
    }
}
exports.Collection = Collection;
